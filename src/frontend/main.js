// Generated by CoffeeScript 1.4.0
(function() {
  var AcceptKey, AcceptKeyFunction, CancelKey, CancelKeyFunction, CtrlEscapeKey, CtrlEscapeKeyFunction, EscapeKey, EscapeKeyFunction, Post, addCmdLineCommands, addErrorLogger, extractFunction, isAcceptKey, isCtrlAcceptKey, isCtrlEscapeKey, isEscapeKey, loadMapping, m, root, _i, _len, _ref,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  Post = function(msg) {
    return chrome.extension.sendMessage(msg, function(response) {});
  };

  isCtrlAcceptKey = function(key) {
    return key === "<C-Enter>";
  };

  isAcceptKey = function(key) {
    return __indexOf.call(AcceptKey, key) >= 0;
  };

  isEscapeKey = function(key) {
    return __indexOf.call(EscapeKey, key) >= 0;
  };

  isCtrlEscapeKey = function(key) {
    if (Option.get("enable_vrome_key") === key) {
      return true;
    }
    return __indexOf.call(CtrlEscapeKey, key) >= 0;
  };

  root = typeof exports !== "undefined" && exports !== null ? exports : window;

  _ref = ["Post", "isCtrlAcceptKey", "isAcceptKey", "isEscapeKey", "isCtrlEscapeKey"];
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    m = _ref[_i];
    root[m] = this[m];
  }

  AcceptKeyFunction = function() {
    Search.next();
    Dialog.openCurrent();
    Buffer.gotoFirstMatchHandle();
    return Buffer.deleteMatchHandle();
  };

  CancelKeyFunction = function() {
    Hint.remove();
    InsertMode.blurFocus();
    KeyEvent.reset();
    Search.stop();
    Dialog.stop(true);
    CmdBox.remove();
    return Help.hide(true);
  };

  EscapeKeyFunction = function() {
    return CancelKeyFunction();
  };

  CtrlEscapeKeyFunction = function() {
    KeyEvent.enable();
    return EscapeKeyFunction();
  };

  extractFunction = function(functionName, context) {
    var func;
    if (context == null) {
      context = window;
    }
    return $((function() {
      var _j, _len1, _ref1, _results;
      _ref1 = functionName.split(".");
      _results = [];
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        func = _ref1[_j];
        _results.push(context[func]);
      }
      return _results;
    })()).get(-1);
  };

  AcceptKey = CMDS["global"]["AcceptKeyFunction"].k;

  CancelKey = CMDS["global"]["CancelKeyFunction"].k;

  EscapeKey = CMDS["global"]["CancelKeyFunction"].k;

  CtrlEscapeKey = CMDS["global"]["CtrlEscapeKeyFunction"].k;

  loadMapping = function() {
    var catName, commands, fname, func, info, key, keys, _j, _k, _l, _len1, _len2, _len3;
    for (catName = _j = 0, _len1 = CMDS.length; _j < _len1; catName = ++_j) {
      commands = CMDS[catName];
      for (fname = _k = 0, _len2 = comands.length; _k < _len2; fname = ++_k) {
        info = comands[fname];
        func = extractFunction(fname, window);
        if ($.isFunction(info.gk)) {
          info.gk();
        } else {
          keys = [];
          if (typeof info.k === "string") {
            keys.push(info.k);
          } else {
            keys = info.k;
          }
          for (_l = 0, _len3 = keys.length; _l < _len3; _l++) {
            key = keys[_l];
            if (info.i || info.both) {
              KeyEvent.add(key, func, true);
            }
            if (!info.i || info.both) {
              KeyEvent.add(key, func);
            }
          }
        }
      }
    }
    return KeyEvent.add("<C-Enter>", Search.prev, true);
  };

  addCmdLineCommands = function() {
    CmdLine.add("help", "show help ", Help.show);
    CmdLine.add("bdelete", "buffer delete match", Buffer.deleteMatchHandle, true);
    CmdLine.add("mdelete", "mark delete match", Marks.deleteQuickMark, true);
    CmdLine.add("make-links", "transforms URLs into clickable links", Page.transformURLs);
    CmdLine.add("options", "opens options page", Page.openOptions);
    return CmdLine.add("toggle-images", "toggle images", Page.hideImages);
  };

  addErrorLogger = function() {
    return window.addEventListener("error", (function(err) {
      return Debug(err);
    }), false);
  };

  try {
    console.log('sdsd');
    addCmdLineCommands();
    console.log('111');
    addErrorLogger();
    console.log('222');
    loadMapping();
    console.log('333');
    runIt([]);
  } catch (err) {
    console.log(err);
    Debug(err);
  }

}).call(this);
