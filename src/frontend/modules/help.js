// Generated by CoffeeScript 1.4.0
(function() {
  var Help, root;

  Help = (function() {
    var HelpUtils, buildContent, level, ncmds, transformCommands, _ref;

    function Help() {}

    _ref = [null, 0], ncmds = _ref[0], level = _ref[1];

    Help.show = function() {
      var _this = this;
      ncmds = transformCommands();
      return $(document).ready(function() {
        _this.hide();
        return buildContent();
      });
    };

    Help.hide = function(reset) {
      level = Math.max([times(true, true), ++level]);
      if (reset) {
        level = 0;
      }
      return $("#vromeHelpBox, #vromeHelpOverlay").remove();
    };

    buildContent = function() {
      var height, helpBox, overlay, table;
      overlay = $("<div>", {
        id: "vromeHelpOverlay"
      });
      $(document.body).append(overlay);
      table = HelpUtils.buildCommandsHTML();
      helpBox = $("<div/>", {
        id: "vromeHelpBox"
      });
      helpBox.append(table);
      $(document.body).append(helpBox);
      height = Math.max([helpBox.height(), $(document.body).height()]);
      return overlay.css({
        height: height,
        width: "100%"
      });
    };

    transformCommands = function() {
      var binding, bindings, categoryName, ck, commands, customKeys, customMapping, cv, fname, info, k, key, keys, ret, reverseCustomMapping, unmap, unmappedKeys, value, _i, _j, _k, _l, _len, _len1, _len2, _len3, _ref1;
      _ref1 = [Settings.get("configure.map"), {}], customMapping = _ref1[0], reverseCustomMapping = _ref1[1];
      for (key = _i = 0, _len = customMapping.length; _i < _len; key = ++_i) {
        value = customMapping[key];
        reverseCustomMapping[value] = key;
      }
      customKeys = (function() {
        var _j, _len1, _results;
        _results = [];
        for (key = _j = 0, _len1 = customMapping.length; _j < _len1; key = ++_j) {
          value = customMapping[key];
          _results.push(key);
        }
        return _results;
      })();
      unmap = Settings.get("configure.unmap");
      unmappedKeys = (function() {
        var _j, _len1, _results;
        _results = [];
        for (key = _j = 0, _len1 = unmap.length; _j < _len1; key = ++_j) {
          value = unmap[key];
          _results.push(key);
        }
        return _results;
      })();
      ncmds = cmds.clone();
      bindings = KeyEvent.bindings.slice(KeyEvent.coreBindingsIndex);
      if (customKeys || unmappedKeys) {
        for (categoryName = _j = 0, _len1 = ncmds.length; _j < _len1; categoryName = ++_j) {
          commands = ncmds[categoryName];
          for (fname = _k = 0, _len2 = commands.length; _k < _len2; fname = ++_k) {
            info = commands[fname];
            if (info.gk) {
              return;
            }
            keys = (function() {
              var _l, _len3, _results;
              _results = [];
              for (_l = 0, _len3 = bindings.length; _l < _len3; _l++) {
                binding = bindings[_l];
                if (binding[1] === eval(fname)) {
                  _results.push(binding[0]);
                }
              }
              return _results;
            })();
            if (typeof info.k === "string") {
              keys.push(info.k);
            } else {
              keys = info.k;
            }
            for (_l = 0, _len3 = keys.length; _l < _len3; _l++) {
              k = keys[_l];
              if (reverseCustomMapping[k] !== undefined) {
                keys.push(reverseCustomMapping[k]);
              }
            }
            keys = (function() {
              var _len4, _len5, _m, _n, _results;
              _results = [];
              for (_m = 0, _len4 = keys.length; _m < _len4; _m++) {
                k = keys[_m];
                ret = true;
                for (ck = _n = 0, _len5 = customMapping.length; _n < _len5; ck = ++_n) {
                  cv = customMapping[ck];
                  if (ck.length < k.length && k.startsWith(ck)) {
                    ret = false;
                  }
                }
                _results.push(ret && !(unmappedKeys.indexOf(k) || customKeys.indexOf(k)));
              }
              return _results;
            })();
            info.k = $.unique(keys);
          }
        }
      }
      return ncmds;
    };

    HelpUtils = {
      OptionUtils: {
        buildOptionsHeadersHTML: function(info) {
          var hasDefaultOptions, optDesc, optName, _i, _len, _ref1;
          hasDefaultOptions = false;
          _ref1 = info.o;
          for (optName = _i = 0, _len = _ref1.length; _i < _len; optName = ++_i) {
            optDesc = _ref1[optName];
            if (!hasDefaultOptions && Option.defaultOptions[optName] !== undefined) {
              hasDefaultOptions = true;
            }
          }
          return $("<tr>").append($("<td>", {
            text: "Name",
            "class": "help_optHeader"
          }), $("<td>", {
            text: (hasDefaultOptions && "Default") || "",
            "class": "help_optHeader"
          }), $("<td>", {
            html: "Value&nbsp;&nbsp;",
            "class": "help_optHeader"
          }), $("<td>", {
            text: "Description",
            "class": "help_optHeader"
          }));
        },
        buildOptionHtml: function(optDesc, optName) {
          var defaultValue, optValue;
          defaultValue = Option.defaultOptions[optName];
          defaultValue = stringify(defaultValue);
          optValue = stringify(Option.get(optName));
          optValue = (optValue === defaultValue && " ") || optValue;
          if (!$.isNumeric(defaultValue)) {
            defaultValue = defaultValue || "";
          }
          if (!$.isNumber(optValue)) {
            optValue = optValue || "";
          }
          return $("<tr>").append($("<td/>", {
            text: optName,
            "class": "help_optName"
          }), $("<td/>", {
            html: defaultValue.toString().formatLong(15, "help_optDefault"),
            "class": "help_optDefault"
          }), $("<td/>", {
            html: optValue.toString().formatLong(15, "help_optValue"),
            "class": "help_optValue"
          }), $("<td/>", {
            html: "&nbsp;" + optDesc.firstLetterUpper().formatLineBreaks(),
            "class": "help_optDesc"
          }));
        }
      },
      CommandUtils: {
        buildCommandDetailsHTML: function(info) {
          var description, optsTable, ret;
          ret = $("<td>", {
            "class": "help_title",
            text: info.t.firstLetterUpper()
          });
          description = (info.d && info.d.escape.formatLineBreaks()) || "";
          optsTable = HelpUtils.buildOptionsHTML(info);
          $("<table>").append($("<tr>").append($("<td/>", {
            html: description,
            "class": (level < 2 ? "help_hidden" : "help_desc")
          })), $("<tr>").append($("<td>").text((info.o && "Options") || "").addClass((level < 3 ? "help_hidden" : "help_optsLabel")).append(optsTable))).appendTo(ret);
          return ret;
        },
        buildCommandHTML: function(info) {
          var keys;
          keys = (((typeof info.k === "string") && info.k) || info.k.join(" ")).escape;
          if (keys.trim().length === 0) {
            keys = "[NONE]";
          }
          return $("<tr>").append($("<td/>", {
            html: (info.o && "&nbsp; O") || "",
            "class": "help_hasOptions"
          }), $("<td/>", {
            html: (info.s && "&nbsp; S") || "",
            "class": "help_server"
          }), $("<td/>", {
            html: (info.c && "&nbsp;C") || "",
            "class": "help_count"
          }), $("<td/>", {
            html: keys + "&nbsp;",
            "class": (keys === "[NONE]" ? "help_keyShortcutNone" : "help_keyShortcut")
          }), HelpUtils.CommandUtils.buildCommandDetailsHTML(info));
        }
      },
      buildOptionsHTML: function(info) {
        var optDesc, optName, ret, _i, _len, _ref1;
        ret = $("<table>", {
          id: "help_optsTable"
        });
        if (info.o) {
          ret.append(HelpUtils.OptionUtils.buildOptionsHeadersHTML(info));
        }
        _ref1 = info.o;
        for (optName = _i = 0, _len = _ref1.length; _i < _len; optName = ++_i) {
          optDesc = _ref1[optName];
          ret.append(HelpUtils.OptionUtils.buildOptionHtml(optDesc, optName));
        }
        if (info.o) {
          ret.append($("<td/>", {
            html: "<br/>"
          }));
        }
        return ret;
      },
      buildCommandsHTML: function() {
        var categoryName, commandName, commands, first, info, ret, _i, _j, _len, _len1;
        ret = $("<table>", {
          id: "vromeHelpGiantTable"
        });
        ret.append($("<tr>").append($("<td/>"), $("<td/>"), $("<td/>"), $("<td/>"), $("<td/>", {
          text: "C",
          "class": "help_count"
        }), $("<td/>", {
          html: "&nbsp;accepts count",
          "class": "help_defaultColor"
        })), $("<tr>").append($("<td/>"), $("<td/>"), $("<td/>"), $("<td/>"), $("<td/>", {
          text: "S",
          "class": "help_server"
        }), $("<td/>", {
          html: "&nbsp;requires a server",
          "class": "help_defaultColor"
        })), $("<tr>").append($("<td/>"), $("<td/>"), $("<td/>"), $("<td/>"), $("<td/>", {
          text: "O",
          "class": "help_hasOptions"
        }), $("<td/>", {
          html: "&nbsp;has options",
          "class": "help_defaultColor"
        })));
        first = true;
        for (categoryName = _i = 0, _len = ncmds.length; _i < _len; categoryName = ++_i) {
          commands = ncmds[categoryName];
          ret.append($("<tr>").append($("<td/>", {
            html: !first && "<br/><br/>"
          })));
          first = false;
          ret.append($("<tr>").append($("<td/>"), $("<td/>"), $("<td/>"), $("<td/>"), $("<td>").append($("<h2/>", {
            text: categoryName.firstLetterUpper()
          })).addClass("help_categoryTitle")));
          for (commandName = _j = 0, _len1 = commands.length; _j < _len1; commandName = ++_j) {
            info = commands[commandName];
            ret.append(HelpUtils.CommandUtils.buildCommandHTML(info));
          }
        }
        return ret;
      }
    };

    return Help;

  })();

  root = typeof exports !== "undefined" && exports !== null ? exports : window;

  root.Help = Help;

}).call(this);
