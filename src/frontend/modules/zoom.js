// Generated by CoffeeScript 1.4.0
(function() {
  var Zoom, root;

  Zoom = (function() {
    var currentLevel, default_index, levels, setZoom;

    function Zoom() {}

    levels = ["30%", "50%", "67%", "80%", "90%", "100%", "110%", "120%", "133%", "150%", "170%", "190%", "220%", "250%", "280%", "310%"];

    default_index = levels.indexOf("100%");

    currentLevel = function() {
      var index, _ref, _ref1;
      index = levels.indexOf(typeof document !== "undefined" && document !== null ? (_ref = document.body) != null ? (_ref1 = _ref.style) != null ? _ref1.zoom : void 0 : void 0 : void 0);
      if (index === -1) {
        return levels.indexOf("100%");
      } else {
        return index;
      }
    };

    setZoom = function(count, keepCurrentPage) {
      var index, level, topPercent;
      index = (count ? currentLevel() + (times() * Number(count)) : default_index);
      index = Math.min(levels.length - 1, Math.max(0, index));
      level = index - default_index;
      Settings.add("hosts.zoom_level", level);
      topPercent = scrollY / document.height;
      document.body.style.zoom = levels[index];
      if (keepCurrentPage) {
        return scrollTo(0, topPercent * document.height);
      }
    };

    Zoom.prototype.setZoom = setZoom;

    Zoom.prototype.zoomIn = function() {
      return setZoom(1);
    };

    Zoom.prototype.out = function() {
      return setZoom(-1);
    };

    Zoom.prototype.more = function() {
      return setZoom(3);
    };

    Zoom.prototype.reduce = function() {
      return setZoom(-3);
    };

    Zoom.prototype.reset = function() {
      return setZoom();
    };

    Zoom.prototype.current_in = function() {
      return setZoom(1, true);
    };

    Zoom.prototype.current_out = function() {
      return setZoom(-1, true);
    };

    Zoom.prototype.current_more = function() {
      return setZoom(3, true);
    };

    Zoom.prototype.current_reduce = function() {
      return setZoom(-3, true);
    };

    Zoom.prototype.current_reset = function() {
      return setZoom(0, true);
    };

    Zoom.prototype.current = function() {
      return parseInt(levels[currentLevel()]) / 100;
    };

    Zoom.prototype.init = function() {
      return Zoom.setZoom(Settings.get("hosts.zoom_level"));
    };

    return Zoom;

  })();

  root = typeof exports !== "undefined" && exports !== null ? exports : window;

  root.Zoom = Zoom;

}).call(this);
